===================================================================================================================
  Terraform code to create a VPC, Subnet and EC2 instance and Install NGINX on EC2 Instance, add S3 bucket,
  IAM multiple users, EBS and attach EBS volume to the EC2,
===================================================================================================================
** Terraform task must include a 'terraform directory' with an 'empty.tf' file.
to ensure that terraform returns no error during the initialization task on the platform.

** 3 Types of stages
- DESIRED State: are actually defined in the terraform configuration files
- KNOWN State: Which is present in tf state file
- ACTUAL State: State of a specific resource on cloud.

** Terraform would be able to use KNOWN state;
   refresh the details from ACTUALstate and compare the changes againts the DESIRED state.
** Provider is respoindible for understanding API interaction and exposing resources.

===================================================================================================================
pwd
cd < The path where we opened the file>  -> ls  -> main.tf  (should be present)
## Initialize the terraform -> terraform init
===================================================================================================================
## Run the below commands to execute the code.

terraform init (It will download the providers)

terraform plan -out terraform.out

terraform apply terraform.out

terraform console                     (To query about the current state)

terraform destroy                     (To destroy entire code)

terraform validate (To show any invalid resource name)
terraform fmt   (To format the code - such as alignment/Indentation)
terraform show (Shows the human readable format of terraform.tf state)

===================================================================================================================
## Create your working folder.
## Create “vars.tf” (All variables will be in this file)
------------------------------------------------------------------------------------------------------------------
 variable "AWS_REGION" {    
    default = "eu-west-2"
}
------------------------------------------------------------------------------------------------------------------
## Create “provider.tf”  (All infrastructure will be on the AWS)

provider "aws" {
    region = "${var.AWS_REGION}"
}

------------------------------------------------------------------------------------------------------------------
-> Check in CLI, if there are 2 files created  -> ls -l
=> Initialize the terraform
   
    terraform init

check the list again- there must be 2 files and 1 folder in the project folder
------------------------------------------------------------------------------------------------------------------
## Create VPC
create vpc.tf

-cidr_block: 10.0.0.0/16 allows you to use the IP address that start with “10.0.X.X”.
-There are 65,536 IP addresses are ready to use.

- Instance_tenancy: if it is true, your ec2 will be the only instance in an AWS physical hardware.


resource “aws_vpc” “prod-vpc” {
    cidr_block = “10.0.0.0/16”
    enable_dns_support = “true” #gives you an internal domain name
    enable_dns_hostnames = “true” #gives you an internal host name
    enable_classiclink = “false”
    instance_tenancy = “default”    
    
    tags = {
      Name = “prod-vpc”
    }
}

------------------------------------------------------------------------------------------------------------------
## Create Public Subnet
We are still in the vpc.tf

- vpc_id: this subnet will be in the vpc just created before. We give the created VPC id to the subnet.
- cidr_block: 10.0.1.0/24. We have 254 IP addresses in this subnet
- map_public_ip_on_launch: **The only difference between private and public subnet is in this line.
                           If it is true, it will be a public subnet, otherwise private.


resource “aws_subnet” “prod-subnet-public-1” {
    vpc_id = “${aws_vpc.prod-vpc.id}”
    cidr_block = “10.0.1.0/24”
    map_public_ip_on_launch = “true” //it makes this a public subnet
    availability_zone = “eu-west-2a”
    tags = {
      Name = “prod-subnet-public-1”
    }
}

------------------------------------------------------------------------------------------------------------------
## Create Internet Gateway
Create network.tf

- It enables your vpc to connect to the internet

resource "aws_internet_gateway" "prod-igw" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    tags = {
      Name = "prod-igw"
    }
}

------------------------------------------------------------------------------------------------------------------
## Create Custom Route Table
We are still in the network.tf

- Create a custom route table for public subnet. public subnet can reach to the internet by using this.

resource "aws_route_table" "prod-public-crt" {
    vpc_id = "${aws_vpc.main-vpc.id}"
    
    route {
        //associated subnet can reach everywhere
        cidr_block = "0.0.0.0/0" 
        //CRT uses this IGW to reach internet
        gateway_id = "${aws_internet_gateway.prod-igw.id}" 
    }
    
    tags = {
      Name = "prod-public-crt"
    }
}

----------------------------------------------------------------------------------------------------------
## Associate CRT and Subnet
We are still in the network.tf

resource "aws_route_table_association" "prod-crta-public-subnet-1"{
    subnet_id = "${aws_subnet.prod-subnet-public-1.id}"
    route_table_id = "${aws_route_table.prod-public-crt.id}"
}

------------------------------------------------------------------------------------------------------------------
## Create a Security Group
We are still in the network.tf

- We will use this Security Group for our EC2.
- To access EC2 by using SSH, we need to open the port 22 for all the internet. 
  check the comments just above cidr_blocks.
- we opened the port 80 here, so that all visitors can able to reach out NGINX

resource "aws_security_group" "ssh-allowed" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    
    egress {
        from_port = 0
        to_port = 0
        protocol = -1
        cidr_blocks = ["0.0.0.0/0"]
    }
    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        // This means, all ip address are allowed to ssh ! 
        // Do not do it in the production. 
        // Put your office or home address in it!
        cidr_blocks = ["0.0.0.0/0"]
    }
    //If you do not add this rule, you can not reach the NGIX  
    ingress {
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    tags = {
      Name = "ssh-allowed"
    }
}

------------------------------------------------------------------------------------------------------------------
## Add Ami variable into the “vars.tf”

-Before creating the EC2 instance, we need to add AMI variable to the vars file. 
-Here, we used “map” type variable. 

-You can find proper image from this site.  =>  https://cloud-images.ubuntu.com/locator/ec2/

variable "AMI" {
    type = "map"
    
    default {
        eu-west-2 = "ami-03dea29b0216a1e03"
        us-east-1 = "ami-0c2a1acae6667e438"
    }
}

------------------------------------------------------------------------------------------------------------------
## Create EC2

- we used lookup to get AMI from the variables file because its type is map
- Describe subnet_id (this ec2 will be in this subnet) and security group (this ec2 will use this SG). 
- We need to create a key-pair, 
- aws_key_pair resource sends the public key to the EC2. So that, we can connect through it.
- 2 provisioner and 1 connection parts are required for NGINX installation. 
- There are better ways to do this. For example; cloud init config method.

resource "aws_instance" "web1" {
    ami = "${lookup(var.AMI, var.AWS_REGION)}"
    instance_type = "t2.micro"
    # VPC
    subnet_id = "${aws_subnet.prod-subnet-public-1.id}"
    # Security Group
    vpc_security_group_ids = ["${aws_security_group.ssh-allowed.id}"]
    # the Public SSH key
    key_name = "${aws_key_pair.<Key_pair name>.id}"
    # nginx installation
    provisioner "file" {
        source = "nginx.sh"
        destination = "/tmp/nginx.sh"
    }
    provisioner "remote-exec" {
        inline = [
             "chmod +x /tmp/nginx.sh",
             "sudo /tmp/nginx.sh"
        ]
    }
    connection {
        user = "${var.EC2_USER}"
        private_key = "${file("${var.PRIVATE_KEY_PATH}")}"
    }
}
// Sends your public key to the instance  (<Key_pair name> = name the keypair)
resource "aws_key_pair" "<Key_pair name>" {
    key_name = "<Key_pair name>"
    public_key = "${file(var.PUBLIC_KEY_PATH)}"
}

------------------------------------------------------------------------------------------------------------------
## Create a key-pair
 Type command from the CLI. it will generate the Key.
-> 
ssh-keygen -f <Key_pair name>

-------------------------------------------------------------
terraform plan -out terraform.out

terraform apply terraform.out

terraform console      
=================================================================================================================
## Create S3 bucket in AWS

provider "aws" {               // On which cloud environment we want to work on
    region = "us-east-1"       // where we working- region
    version = "~>2.46"         // terrform version
}

-----------------------------------------------------------------------------------------------------------------
From CLI -> enter Access_key credentials ->
export AWS_ACCESS_KEY_ID = <  copy id from IAM     >
export AWS_SECRET_ACCESS-KEY = <  copy id from IAM    >

# run command to check the S3 bucket is created on not
terraform plan
terraform apply

=> To check the current state-  run -> terraform console
> aws_s3_bucket.my_s3_bucket
> aws_s3_bucket.my_s3_bucket.versioning
> aws_s3_bucket.my_s3_bucket.versioning[0]
> aws_s3_bucket.my_s3_bucket.versioning[0].enabled
> exit  (/ exit from console)

------------------------------------------------------------------------------------------------------------------
resource = "aws_s3_bucket" "my_s3_bucket" {
    bucket = "my_test_bucket_001"
    versioning {
         enabled = true
  }
}

output "my_s3_bucket_versioning"{
value = aws_s3_bucket.my_s3_bucket.versioning[0].enabled
}

resourse "aws_iam__user" "my-iam_user" {
    name = "my_iam_user_abc"
}
output "my_iam_user_complete_details " {
    value = aws_my_iam_user.my_iam_user
}
------------------------------------------------------------------------------------------------------------------
# To create multiple users
-> create a new folder-> create a new file


provider "aws" {               
    region = "us-east-1"       
    version = "~>2.46"    
}

resourse "aws_iam__user" "my-iam_users" {
    count = 2                                     (give count as per your requirements)
    name = "my_iam_user_${count.index}"
}

------------------------------------------------------------------------------------------------------------------
## Create a EBS volume and attach it to EC2


resource "aws_ebs_volume" "test_ebs" {
    availability_zone = "us-east-1"
    size = 10
}
resource "aws_volume_attachment" "ebs_attach" {
    device_name = "/dev/user"
    volume_id = aws_ebs_volume.test_ebs.id
    instance_id = aws_instance.prod-vpc.id
}
------------------------------------------------------------------------------------------------------------------
terraform apply -auto-approve  (automatically applies )

===================================================================================================================
==================================================**************===================================================
===================================================================================================================










